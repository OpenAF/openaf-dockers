init:
  tmpFile : /tmp/ojob.zip
  ojobPath: /ojob
  secrets : /secrets/secrets.yaml
  ojobFile: /ojob/main.yaml

help:
  text   : oJobRT entrypoint
  expects:
  - name     : OJOB_CONFIG
    desc     : ZIP file or URL to a zip file (if OJOB_METHOD=HTTP) with the oJob main.yaml, among other files, to run
    example  : myojob.zip
    mandatory: false
  - name     : OJOB_METHOD
    desc     : Method to retrieve OJOB_CONFIG (e.g. S3, HTTP, LOCAL, NONE)
    example  : S3
    mandatory: false
  - name     : OJOB_HASH
    desc     : Ensure the OJOB_CONFIG zip file or main.yaml as the provided hash (SHA-1)
    example  : 202cb962ac59075b964b07152d234b70
    mandatory: false
  - name     : OJOB_JSONLOG
    desc     : Turns the log output to json
    example  : "true"
    mandatory: false

include:
- s3.yaml
- ojob.yaml

ojob:
  opacks      :
  - S3
  - oJob-common
  catch       : "logErr((isDef(global.uuid) ? global.uuid + \" | \" : \"\") + String(exception));exit(-1)"
  argsFromEnvs: true
  logToConsole: false
  log         :
    async: false

todo:
- name: Prepare shutdown
- name: Initial checks
- name: Copy oJob from S3
  when: s3
- name: Copy oJob from HTTP
  when: http
- name: Copy oJob
- name: oJob execution

jobs:
# --------------------
- name: Initial checks
  exec: |
    var isOk       = true
    var isLocal    = false
    var isNone     = false
    var hasSecrets = false

    if (toBoolean(args.OJOB_JSONLOG)) setLog({ format: "json" })
    global.origLogFormat = clone(__logFormat)
    global.uuid          = genUUID()

    var packs = $from( getOPackLocalDB() )
                .sort("name")
                .notEquals("name", "OpenAF")
                .select(r=> ({ name: r.name, version: r.version }))
    log(global.uuid + " | oJobRT start (OpenAF version " + getVersion() + " (" + getDistribution() + "), oPacks: " + af.toSLON( packs ) + ")" )

    // Check arguments
    if (isUnDef(args.OJOB_CONFIG)) {
      logWarn(global.uuid + " | No OJOB_CONFIG defined. Default is /ojob/main.yaml.")
      args.OJOB_CONFIG = "/ojob/main.yaml"
    }

    args.OJOB_METHOD = _$(args.OJOB_METHOD, "OJOB_METHOD").default("NONE")
    args.OJOB_METHOD = args.OJOB_METHOD.toUpperCase()

    if (!io.fileExists("/ojob"))
      $sh("sudo mkdir /ojob && sudo chown openaf:openaf /ojob").prefix("sh").get()

    // Is local?
    if (args.OJOB_METHOD == "LOCAL") {
      if (io.fileExists(args.OJOB_CONFIG)) {
        log(global.uuid + " | Identified local ojob in: " + args.OJOB_CONFIG)
        isLocal = true

        ow.oJob.setState("local")
      } else {
        logWarn(global.uuid + " | File '" + args.OJOB_CONFIG + "' not found.")
      }
    } else {
      if (args.OJOB_METHOD == "S3")   ow.oJob.setState("s3")
      if (args.OJOB_METHOD == "HTTP") ow.oJob.setState("http")
      if (args.OJOB_METHOD == "NONE") isNone = true
    }

    // Check if secrets is available
    if (!io.fileExists("/secrets/secrets.yaml") || isDef(args.SECKEY)) {
      hasSecrets = true;
    } 

    $set("ready", isOk)
    $set("local", isLocal)
    $set("secrets", hasSecrets)
    $set("none", isNone)

# -----------------------
- name: Check if is ready
  exec: |
    if (!$get("ready")) {
      logWarn(global.uuid + " | Failed initial checks. Not executing.")
      return {};
    }

# -----------------------
- name: Copy oJob from S3
  deps: Initial checks
  from: Check if is ready
  to  : S3 Get object
  exec: |
    args.secFile   = _$(args.secFile).default(args.init.secrets)
    if (io.fileExists(args.secFile)) {
      args.secBucket = _$(args.secBucket).default("ojob")
      args.secKey    = _$(args.secKey).default("s3_config")
    } else {
      delete args.secFile

      if (Object.keys(args).filter(r => r.startsWith("sec")).length < 0) args.secIgnore = true
    }
    if (isDef(args.secKey)) {
      args.secDontAsk = true
      args = $job("ojob sec get", args)
    }
    
    args.objectName = args.OJOB_CONFIG
    args.localPath  = args.init.tmpFile
    tlog(global.uuid + " | Copying ojob config zip from S3 ({{url}} ({{bucket}})/{{objectName}})...", args)

# -------------------------
- name: Copy oJob from HTTP
  deps: Initial checks
  from: Check if is ready
  exec: |
    ow.loadFormat()
    tlog(global.uuid + " | Trying to download '{{{OJOB_CONFIG}}}'...", args)
    var res = $rest({ login: args.login, pass: args.pass }).head(args.OJOB_CONFIG)

    if (isDef(res) && isUnDef(res.error)) {
      if (isDef(res.response) && isDef(res.response["Content-Length"]))
        log(global.uuid + " |  downloading " + ow.format.toBytesAbbreviation(res.response["Content-Length"]) + "...")
      $rest({ login: args.login, pass: args.pass }).get2File(args.init.tmpFile, args.OJOB_CONFIG)
    } else {
      tlogErr(global.uuid + " | Can't access '{{{OJOB_CONFIG}}}': " + af.toSLON(res.error), args)
    }

# ---------------
- name: Copy oJob
  deps: Initial checks
  from: Check if is ready
  exec: |
    var isLocal = $get("local")
    var isNone  = $get("none")
    var ffile    = (isNone ? args.OJOB_CONFIG : (isLocal ? args.OJOB_CONFIG : args.init.tmpFile))
    var hash     = sha1(io.readFileStream(ffile))

    if (args.OJOB_CONFIG.endsWith(".zip")) {
      // It's a zip file

      plugin("ZIP");
      var zip = new ZIP();
      log(global.uuid + " | oJob ZIP SHA-1: " + hash);

      // Checking for secrets.yaml inside the zip file
      try {
        $from(zip.list(ffile))
        .equals("name", "secrets.yaml")
        .select(f => {
          if (!io.fileExists("/secrets"))
            $sh("sudo mkdir /secrets && sudo chown openaf:openaf /secrets").prefix("sh").get()
          var os = io.writeFileStream("/secrets/secrets.yaml")
          ioStreamCopy(os, zip.streamGetFileStream(ffile, f.name))
          os.close()
        });
        isOk = true
      } catch(e) {
        logErr(global.uuid + " | Error while trying to open " + ffile + ": " + String(e))
        isOk = false
      }
      
      var fileList = zip.list(ffile);
      tlog(global.uuid + " | Unzipping #{{count}} file(s) with a total of {{size}} bytes...", {
        count: $from(fileList).greater("size", 0).count(),
        size : $from(fileList).sum("size")
      });
      $from(fileList).greater("size", 0).select(file => {
        try {
          var os = io.writeFileStream(args.init.ojobPath + "/" + file.name);
          ioStreamCopy(os, zip.streamGetFileStream(ffile, file.name));
          os.close();
        } catch(e) {
          logErr(global.uuid + " | Error unzipping " + file.name + ": " + e);
        }
      });
      zip.close();
    } else {
      log(global.uuid + " | oJob SHA-1: " + hash);

      // It's a local file
      if (isLocal) {
        if (ffile.endsWith(".json")) {
          io.cp(ffile, args.init.ojobPath + "/main.json");
        } else {
          io.cp(ffile, args.init.ojobPath + "/main.yaml");
        }
      }
    }

    if (isDef(args.OJOB_HASH)) {
      if (args.OJOB_HASH != hash) {
        throw("Provided hash '" + args.OJOB_HASH + "' doesn't match '" + hash + "' (" + ffile + ")")
      }
    }

# --------------------
- name: oJob execution  
  deps: Initial checks
  from: Check if is ready
  exec: |
    if (io.fileExists(args.init.ojobFile)) {
      log(global.uuid + " | Starting " + args.init.ojobFile + "...")

      oJobRunFile(args.init.ojobFile, __, genUUID(), __, true);
      
      __logFormat = global.origLogFormat
      log(global.uuid + " | Ending " + args.init.ojobFile)
    } else {
      logWarn(global.uuid + " | No " + args.init.ojobFile + " file found.");
    }

    // End code
    exit(0)

# ----------------------
- name: Prepare shutdown
  type: shutdown
  exec: |
    __logFormat = global.origLogFormat
    log((isDef(global.uuid) ? global.uuid + " | " : "") + "oJobRT end")
